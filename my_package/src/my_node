#!/usr/bin/env python3

import rospy
import numpy as np
from threading import Lock

from std_msgs.msg import String
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Point
from pcimr_simulation.srv import InitPos

"""
def callback_pos(data):
	rospy.loginfo(data.x)
	
def callback_scan(data):
	rospy.loginfo(data.range_min)
	
def listener():
	rospy.Subscriber('/robot_pos', Point, callback_pos)
	rospy.Subscriber('/scan', LaserScan, callback_scan)
	rospy.spin()
	
if __name__ == '__main__':
	rospy.init_node('own_node', anonymous=True)
	listener()
	
"""

class OwnNode:
	"""
	A node, capsuling the functionality from the simple robot simulator.
	"""

	def __init__(self):
		#robot_variable
		self.data=[0,0,0,0,0,0]
		self.init_pos=[0,0]
		self.count=[0,0]
		
		# Initialize member variables
		self.sim_lock = Lock()
		
		# Initialize Publishers
		self.pub_move = rospy.Publisher('/move', String, queue_size=10)

		# Initialize Subscribers
		self.sub_pos = rospy.Subscriber('/robot_pos', Point, self.callback_pos)
		self.sub_scan = rospy.Subscriber('/scan', LaserScan, self.callback_scan)
		
		# Initialize Services
		#self.srv_init_pos = rospy.Service('srv_init_pos', init_pos.srv, self.handle_init_pos)

	def callback_scan(self, data):
		if self.count[0]==0:
			self.sim_lock.acquire()
			rospy.loginfo(data.ranges[2])
			#1:back, 2:left, 3:front, 3:right
			self.data[2:7]=data.ranges
			self.count[0]=1
			self.sim_lock.release()
		elif self.count[1]==1:
			self.count[0]=0
			self.count[1]=0
			self.publish()
		
	def callback_pos(self, data):
		if self.count[1]==0:
			self.sim_lock.acquire()
			rospy.loginfo(data.x)
			self.data[0]=data.x
			self.data[1]=data.y
			self.count[1]=1
			self.sim_lock.release()
		elif self.count[0]==1:
			self.count[0]=0
			self.count[1]=0
			self.publish()
		
	def handle_init_pos(self, req):
		self.init_pos[0] = req.x
		self.init_pos[1] = req.y
		
	def publish (self):
		if self.data[4]>1:
			self.pub_move.publish('N')
		elif self.data[5]>1:
			self.pub_move.publish('E')
		
		
	def run(self):
		# Update message data

		while not rospy.is_shutdown():
			rospy.spin()
			


	
	
			
if __name__ == "__main__":
    rospy.init_node('own_node')
    own_node = OwnNode()
    own_node.run()
